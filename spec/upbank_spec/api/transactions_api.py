# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictInt, StrictStr

from typing import Optional

from upbank_client.models import GetTransactionResponse
from upbank_client.models import ListTransactionsResponse
from upbank_client.models import TransactionStatusEnum

from upbank_spec.api_client import ApiClient
from upbank_spec.api_response import ApiResponse
from upbank_spec.rest import RESTResponseType


class TransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def accounts_account_id_transactions_get(
        self,
        account_id: Annotated[StrictStr, Field(description="The unique identifier for the account. ")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTransactionsResponse:
        """List transactions by account

        Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param account_id: The unique identifier for the account.  (required)
        :type account_id: str
        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._accounts_account_id_transactions_get_serialize(
            account_id=account_id,
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def accounts_account_id_transactions_get_with_http_info(
        self,
        account_id: Annotated[StrictStr, Field(description="The unique identifier for the account. ")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTransactionsResponse]:
        """List transactions by account

        Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param account_id: The unique identifier for the account.  (required)
        :type account_id: str
        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._accounts_account_id_transactions_get_serialize(
            account_id=account_id,
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def accounts_account_id_transactions_get_without_preload_content(
        self,
        account_id: Annotated[StrictStr, Field(description="The unique identifier for the account. ")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List transactions by account

        Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param account_id: The unique identifier for the account.  (required)
        :type account_id: str
        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._accounts_account_id_transactions_get_serialize(
            account_id=account_id,
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _accounts_account_id_transactions_get_serialize(
        self,
        account_id,
        page_size,
        page_after,
        filter_status,
        filter_since,
        filter_until,
        filter_category,
        filter_tag,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page[size]', page_size))
            
        if page_after is not None:
            
            _query_params.append(('page[after]', page_after))
            
        if filter_status is not None:
            
            _query_params.append(('filter[status]', filter_status.value))
            
        if filter_since is not None:
            if isinstance(filter_since, datetime):
                _query_params.append(
                    (
                        'filter[since]',
                        filter_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[since]', filter_since))
            
        if filter_until is not None:
            if isinstance(filter_until, datetime):
                _query_params.append(
                    (
                        'filter[until]',
                        filter_until.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[until]', filter_until))
            
        if filter_category is not None:
            
            _query_params.append(('filter[category]', filter_category))
            
        if filter_tag is not None:
            
            _query_params.append(('filter[tag]', filter_tag))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/accounts/{accountId}/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def transactions_get(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTransactionsResponse:
        """List transactions

        Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_get_serialize(
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def transactions_get_with_http_info(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTransactionsResponse]:
        """List transactions

        Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_get_serialize(
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def transactions_get_without_preload_content(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records to return in each page. ")] = None,
        page_after: Annotated[Optional[StrictStr], Field(description="The token to retrieve the next page in the results. ")] = None,
        filter_status: Annotated[Optional[TransactionStatusEnum], Field(description="The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. ")] = None,
        filter_since: Annotated[Optional[datetime], Field(description="The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_until: Annotated[Optional[datetime], Field(description="The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. ")] = None,
        filter_category: Annotated[Optional[StrictStr], Field(description="The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. ")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List transactions

        Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 

        :param page_size: The number of records to return in each page. 
        :type page_size: int
        :param page_after: The token to retrieve the next page in the results. 
        :type page_after: str
        :param filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :type filter_status: TransactionStatusEnum
        :param filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_since: datetime
        :param filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :type filter_until: datetime
        :param filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :type filter_category: str
        :param filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :type filter_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_get_serialize(
            page_size=page_size,
            page_after=page_after,
            filter_status=filter_status,
            filter_since=filter_since,
            filter_until=filter_until,
            filter_category=filter_category,
            filter_tag=filter_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _transactions_get_serialize(
        self,
        page_size,
        page_after,
        filter_status,
        filter_since,
        filter_until,
        filter_category,
        filter_tag,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page[size]', page_size))
            
        if page_after is not None:
            
            _query_params.append(('page[after]', page_after))
            
        if filter_status is not None:
            
            _query_params.append(('filter[status]', filter_status.value))
            
        if filter_since is not None:
            if isinstance(filter_since, datetime):
                _query_params.append(
                    (
                        'filter[since]',
                        filter_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[since]', filter_since))
            
        if filter_until is not None:
            if isinstance(filter_until, datetime):
                _query_params.append(
                    (
                        'filter[until]',
                        filter_until.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[until]', filter_until))
            
        if filter_category is not None:
            
            _query_params.append(('filter[category]', filter_category))
            
        if filter_tag is not None:
            
            _query_params.append(('filter[tag]', filter_tag))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def transactions_id_get(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the transaction. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTransactionResponse:
        """Retrieve transaction

        Retrieve a specific transaction by providing its unique identifier. 

        :param id: The unique identifier for the transaction.  (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def transactions_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the transaction. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTransactionResponse]:
        """Retrieve transaction

        Retrieve a specific transaction by providing its unique identifier. 

        :param id: The unique identifier for the transaction.  (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def transactions_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the transaction. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve transaction

        Retrieve a specific transaction by providing its unique identifier. 

        :param id: The unique identifier for the transaction.  (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._transactions_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _transactions_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


