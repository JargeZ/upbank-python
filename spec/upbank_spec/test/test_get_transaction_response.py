# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from upbank_spec.models.get_transaction_response import GetTransactionResponse

class TestGetTransactionResponse(unittest.TestCase):
    """GetTransactionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetTransactionResponse:
        """Test GetTransactionResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetTransactionResponse`
        """
        model = GetTransactionResponse()
        if include_optional:
            return GetTransactionResponse(
                data = upbank_spec.models.transaction_resource.TransactionResource(
                    type = '', 
                    id = '', 
                    attributes = upbank_spec.models.transaction_resource_attributes.TransactionResource_attributes(
                        status = null, 
                        raw_text = '', 
                        description = '', 
                        message = '', 
                        is_categorizable = True, 
                        hold_info = null, 
                        round_up = null, 
                        cashback = null, 
                        amount = null, 
                        foreign_amount = null, 
                        settled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    relationships = upbank_spec.models.transaction_resource_relationships.TransactionResource_relationships(
                        account = upbank_spec.models.transaction_resource_relationships_account.TransactionResource_relationships_account(
                            data = upbank_spec.models.transaction_resource_relationships_account_data.TransactionResource_relationships_account_data(
                                type = '', 
                                id = '', ), 
                            links = upbank_spec.models.account_resource_relationships_transactions_links.AccountResource_relationships_transactions_links(
                                related = '', ), ), 
                        transfer_account = upbank_spec.models.transaction_resource_relationships_transfer_account.TransactionResource_relationships_transferAccount(
                            data = upbank_spec.models.transaction_resource_relationships_transfer_account_data.TransactionResource_relationships_transferAccount_data(
                                type = '', 
                                id = '', ), ), 
                        category = upbank_spec.models.transaction_resource_relationships_category.TransactionResource_relationships_category(
                            data = upbank_spec.models.category_resource_relationships_parent_data.CategoryResource_relationships_parent_data(
                                type = '', 
                                id = '', ), ), 
                        parent_category = upbank_spec.models.category_resource_relationships_parent.CategoryResource_relationships_parent(
                            data = upbank_spec.models.category_resource_relationships_parent_data.CategoryResource_relationships_parent_data(
                                type = '', 
                                id = '', ), ), 
                        tags = upbank_spec.models.transaction_resource_relationships_tags.TransactionResource_relationships_tags(
                            data = [
                                upbank_spec.models.transaction_resource_relationships_tags_data_inner.TransactionResource_relationships_tags_data_inner(
                                    type = '', 
                                    id = '', )
                                ], ), ), 
                    links = upbank_spec.models.account_resource_links.AccountResource_links(
                        self = '', ), )
            )
        else:
            return GetTransactionResponse(
                data = upbank_spec.models.transaction_resource.TransactionResource(
                    type = '', 
                    id = '', 
                    attributes = upbank_spec.models.transaction_resource_attributes.TransactionResource_attributes(
                        status = null, 
                        raw_text = '', 
                        description = '', 
                        message = '', 
                        is_categorizable = True, 
                        hold_info = null, 
                        round_up = null, 
                        cashback = null, 
                        amount = null, 
                        foreign_amount = null, 
                        settled_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    relationships = upbank_spec.models.transaction_resource_relationships.TransactionResource_relationships(
                        account = upbank_spec.models.transaction_resource_relationships_account.TransactionResource_relationships_account(
                            data = upbank_spec.models.transaction_resource_relationships_account_data.TransactionResource_relationships_account_data(
                                type = '', 
                                id = '', ), 
                            links = upbank_spec.models.account_resource_relationships_transactions_links.AccountResource_relationships_transactions_links(
                                related = '', ), ), 
                        transfer_account = upbank_spec.models.transaction_resource_relationships_transfer_account.TransactionResource_relationships_transferAccount(
                            data = upbank_spec.models.transaction_resource_relationships_transfer_account_data.TransactionResource_relationships_transferAccount_data(
                                type = '', 
                                id = '', ), ), 
                        category = upbank_spec.models.transaction_resource_relationships_category.TransactionResource_relationships_category(
                            data = upbank_spec.models.category_resource_relationships_parent_data.CategoryResource_relationships_parent_data(
                                type = '', 
                                id = '', ), ), 
                        parent_category = upbank_spec.models.category_resource_relationships_parent.CategoryResource_relationships_parent(
                            data = upbank_spec.models.category_resource_relationships_parent_data.CategoryResource_relationships_parent_data(
                                type = '', 
                                id = '', ), ), 
                        tags = upbank_spec.models.transaction_resource_relationships_tags.TransactionResource_relationships_tags(
                            data = [
                                upbank_spec.models.transaction_resource_relationships_tags_data_inner.TransactionResource_relationships_tags_data_inner(
                                    type = '', 
                                    id = '', )
                                ], ), ), 
                    links = upbank_spec.models.account_resource_links.AccountResource_links(
                        self = '', ), ),
        )
        """

    def testGetTransactionResponse(self):
        """Test GetTransactionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
